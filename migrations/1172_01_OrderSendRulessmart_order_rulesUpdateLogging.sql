alter table Logs.SmartOrderRuleLogs
add column SupplierDeliveryIdColumn varchar(255)
;
DROP TRIGGER IF EXISTS OrderSendRules.SmartOrderRuleLogDelete;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER OrderSendRules.SmartOrderRuleLogDelete AFTER DELETE ON OrderSendRules.smart_order_rules
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.SmartOrderRuleLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 2,
		RuleId = OLD.Id,
		OffersClientCode = OLD.OffersClientCode,
		ParseAlgorithm = OLD.ParseAlgorithm,
		CheckAverageCost = OLD.CheckAverageCost,
		AverageCostBasedOnLineCount = OLD.AverageCostBasedOnLineCount,
		DoNotOrderIfNotOrderedEarly = OLD.DoNotOrderIfNotOrderedEarly,
		CheckOrderCost = OLD.CheckOrderCost,
		CheckRequestRatio = OLD.CheckRequestRatio,
		SearchInCategory = OLD.SearchInCategory,
		From5To4 = OLD.From5To4,
		From4To3 = OLD.From4To3,
		From3To2 = OLD.From3To2,
		From2To1 = OLD.From2To1,
		From1To0 = OLD.From1To0,
		CheckMinOrderCount = OLD.CheckMinOrderCount,
		OverPercentAverageCost = OLD.OverPercentAverageCost,
		AssortimentPriceCode = OLD.AssortimentPriceCode,
		UseOrderableOffers = OLD.UseOrderableOffers,
		NotCheckMinOrder = OLD.NotCheckMinOrder,
		SupplierMinQuantity = OLD.SupplierMinQuantity,
		MinOrderQuantityInPercent = OLD.MinOrderQuantityInPercent,
		IgnoreSupplierInNotPharmacy = OLD.IgnoreSupplierInNotPharmacy,
		Loader = OLD.Loader,
		ColumnSeparator = OLD.ColumnSeparator,
		CodeColumn = OLD.CodeColumn,
		CodeCrColumn = OLD.CodeCrColumn,
		ProductColumn = OLD.ProductColumn,
		ProducerColumn = OLD.ProducerColumn,
		QuantityColumn = OLD.QuantityColumn,
		StartLine = OLD.StartLine,
		CodePage = OLD.CodePage,
		ServiceFields = OLD.ServiceFields,
		SupplierDeliveryIdColumn = OLD.SupplierDeliveryIdColumn;
END;
DROP TRIGGER IF EXISTS OrderSendRules.SmartOrderRuleLogUpdate;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER OrderSendRules.SmartOrderRuleLogUpdate AFTER UPDATE ON OrderSendRules.smart_order_rules
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.SmartOrderRuleLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 1,
		RuleId = OLD.Id,
		OffersClientCode = NULLIF(NEW.OffersClientCode, OLD.OffersClientCode),
		ParseAlgorithm = NULLIF(NEW.ParseAlgorithm, OLD.ParseAlgorithm),
		CheckAverageCost = NULLIF(NEW.CheckAverageCost, OLD.CheckAverageCost),
		AverageCostBasedOnLineCount = NULLIF(NEW.AverageCostBasedOnLineCount, OLD.AverageCostBasedOnLineCount),
		DoNotOrderIfNotOrderedEarly = NULLIF(NEW.DoNotOrderIfNotOrderedEarly, OLD.DoNotOrderIfNotOrderedEarly),
		CheckOrderCost = NULLIF(NEW.CheckOrderCost, OLD.CheckOrderCost),
		CheckRequestRatio = NULLIF(NEW.CheckRequestRatio, OLD.CheckRequestRatio),
		SearchInCategory = NULLIF(NEW.SearchInCategory, OLD.SearchInCategory),
		From5To4 = NULLIF(NEW.From5To4, OLD.From5To4),
		From4To3 = NULLIF(NEW.From4To3, OLD.From4To3),
		From3To2 = NULLIF(NEW.From3To2, OLD.From3To2),
		From2To1 = NULLIF(NEW.From2To1, OLD.From2To1),
		From1To0 = NULLIF(NEW.From1To0, OLD.From1To0),
		CheckMinOrderCount = NULLIF(NEW.CheckMinOrderCount, OLD.CheckMinOrderCount),
		OverPercentAverageCost = NULLIF(NEW.OverPercentAverageCost, OLD.OverPercentAverageCost),
		AssortimentPriceCode = NULLIF(NEW.AssortimentPriceCode, OLD.AssortimentPriceCode),
		UseOrderableOffers = NULLIF(NEW.UseOrderableOffers, OLD.UseOrderableOffers),
		NotCheckMinOrder = NULLIF(NEW.NotCheckMinOrder, OLD.NotCheckMinOrder),
		SupplierMinQuantity = NULLIF(NEW.SupplierMinQuantity, OLD.SupplierMinQuantity),
		MinOrderQuantityInPercent = NULLIF(NEW.MinOrderQuantityInPercent, OLD.MinOrderQuantityInPercent),
		IgnoreSupplierInNotPharmacy = NULLIF(NEW.IgnoreSupplierInNotPharmacy, OLD.IgnoreSupplierInNotPharmacy),
		Loader = NULLIF(NEW.Loader, OLD.Loader),
		ColumnSeparator = NULLIF(NEW.ColumnSeparator, OLD.ColumnSeparator),
		CodeColumn = NULLIF(NEW.CodeColumn, OLD.CodeColumn),
		CodeCrColumn = NULLIF(NEW.CodeCrColumn, OLD.CodeCrColumn),
		ProductColumn = NULLIF(NEW.ProductColumn, OLD.ProductColumn),
		ProducerColumn = NULLIF(NEW.ProducerColumn, OLD.ProducerColumn),
		QuantityColumn = NULLIF(NEW.QuantityColumn, OLD.QuantityColumn),
		StartLine = NULLIF(NEW.StartLine, OLD.StartLine),
		CodePage = NULLIF(NEW.CodePage, OLD.CodePage),
		ServiceFields = NULLIF(NEW.ServiceFields, OLD.ServiceFields),
		SupplierDeliveryIdColumn = NULLIF(NEW.SupplierDeliveryIdColumn, OLD.SupplierDeliveryIdColumn);
END;
DROP TRIGGER IF EXISTS OrderSendRules.SmartOrderRuleLogInsert;
CREATE DEFINER = RootDBMS@127.0.0.1 TRIGGER OrderSendRules.SmartOrderRuleLogInsert AFTER INSERT ON OrderSendRules.smart_order_rules
FOR EACH ROW BEGIN
	INSERT
	INTO `logs`.SmartOrderRuleLogs
	SET LogTime = now(),
		OperatorName = IFNULL(@INUser, SUBSTRING_INDEX(USER(),'@',1)),
		OperatorHost = IFNULL(@INHost, SUBSTRING_INDEX(USER(),'@',-1)),
		Operation = 0,
		RuleId = NEW.Id,
		OffersClientCode = NEW.OffersClientCode,
		ParseAlgorithm = NEW.ParseAlgorithm,
		CheckAverageCost = NEW.CheckAverageCost,
		AverageCostBasedOnLineCount = NEW.AverageCostBasedOnLineCount,
		DoNotOrderIfNotOrderedEarly = NEW.DoNotOrderIfNotOrderedEarly,
		CheckOrderCost = NEW.CheckOrderCost,
		CheckRequestRatio = NEW.CheckRequestRatio,
		SearchInCategory = NEW.SearchInCategory,
		From5To4 = NEW.From5To4,
		From4To3 = NEW.From4To3,
		From3To2 = NEW.From3To2,
		From2To1 = NEW.From2To1,
		From1To0 = NEW.From1To0,
		CheckMinOrderCount = NEW.CheckMinOrderCount,
		OverPercentAverageCost = NEW.OverPercentAverageCost,
		AssortimentPriceCode = NEW.AssortimentPriceCode,
		UseOrderableOffers = NEW.UseOrderableOffers,
		NotCheckMinOrder = NEW.NotCheckMinOrder,
		SupplierMinQuantity = NEW.SupplierMinQuantity,
		MinOrderQuantityInPercent = NEW.MinOrderQuantityInPercent,
		IgnoreSupplierInNotPharmacy = NEW.IgnoreSupplierInNotPharmacy,
		Loader = NEW.Loader,
		ColumnSeparator = NEW.ColumnSeparator,
		CodeColumn = NEW.CodeColumn,
		CodeCrColumn = NEW.CodeCrColumn,
		ProductColumn = NEW.ProductColumn,
		ProducerColumn = NEW.ProducerColumn,
		QuantityColumn = NEW.QuantityColumn,
		StartLine = NEW.StartLine,
		CodePage = NEW.CodePage,
		ServiceFields = NEW.ServiceFields,
		SupplierDeliveryIdColumn = NEW.SupplierDeliveryIdColumn;
END;
