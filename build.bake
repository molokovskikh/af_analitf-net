import System
import System.Reflection
import System.IO
import System.Net.Mail
import System.Xml
import System.Xml.Linq
import System.Linq.Enumerable
import System.Xml.XPath.Extensions
import Mono.Cecil

def FileElement(file as string, id as string, element as XElement):
	return XElement(element.Name.Namespace + "File", XAttribute("Id", id), XAttribute("Source", Path.GetFullPath(file)))

def AddDirectory(id as string, path as string, document as XDocument, manager as XmlNamespaceManager):
	element = document.XPathSelectElement("/prefix:Wix/prefix:Fragment/prefix:DirectoryRef[@Id='$id']/prefix:Component", manager)
	for file in Directory.GetFiles(path):
		fileId = Path.GetFileName(file) + "_" + id
		element.Add(FileElement(file, fileId, element))

	for dir in Directory.GetDirectories(path):
		id = Path.GetFileName(dir)
		AddDirectory(id, dir, document, manager)

Global(
	Project: "src/service/app/app.csproj",
	HumanReadableName: "AnalitF.Net",
	Profile: @catalog,
	Variables : {
		@Production : {
			@UpdateDeployRoot: """\\acdcserv\WebApps\var\update"""
		},
		@Test : {
			@DeployRoot: """\\acdcserv\TEST""",
			@DeployAlias: "AnalitF.Net.Service.Test",
			@UpdateDeployRoot: """\\acdcserv\TEST\var-test\update"""
		}
	},
	JenkinsProject: "AnalitF.Net",
	Retarget: true
)

task @default, [@build]

task @build, ["build:service", "build:client"]

task @prepare, ["Production", "packages:install", "fix:packages", "generate:assembly:info"]

task "build:service", ["prepare"]:
	CleanWeb(Globals, "src/service/app/app.csproj")
	BuildWeb(Globals, "src/service/app/app.csproj")

task @DeployApp:
	XCopyDeploy(Globals, "src/service/app/app.csproj")

task "deploy:service", [@DeployPipeline]

task @deploy, ["Production", "git:tag", "prepare", "deploy:service", "deploy:client", "deploy:update", "git:push:tags"]

task "deploy:client", ["deploy:client:package"]

task "deploy:client:package", ["build:client:package"]:
	impersonate = Configuration.Maybe.impersonate != null
	if impersonate:
		ImpersonateUser("deployer", '$sdfsd887!'):
			Cp("output/package/*.nupkg", "//offdc/MMedia/packages", true)
	else:
		Cp("output/package/*.nupkg", "//offdc/MMedia/packages", true)

task "build:client:package", ["build:client"]:
	proj = "src/client/app/app.csproj"
	output, _ = GetBuildConfig(Globals, proj)
	bin = FileSet("*.exe", BaseDirectory: output).First()

	assembly = AssemblyDefinition.ReadAssembly(bin)
	version = assembly.Name.Version.ToString()
	build = Configuration.Maybe.buildId
	if build:
		version += "-build" + build
	RmDir("output/package", true)
	MkDir("output/package")
	MkDir("output/package/tools")
	Cp("output/setup/setup.exe", "output/package/tools/analitf.net.setup.exe", true)
	Cp(FileSet("**.*", BaseDirectory: "output/client/"), "output/package/tools/", true)
	spec = "output/package/analitf.net.nuspec"
	Cp("assets/package.nuspec", spec)
	specDoc = XDocument.Load(spec)
	versionNode = specDoc.Descendants().First({n| n.Name.LocalName == "version"})
	versionNode.Value = version
	specDoc.Save(spec)
	Exec("cmd.exe", "/C chocolatey.bat pack", BaseDirectory: "output/package").Execute()

task "deploy:update", ["build:client"]:
	dir = Globals.UpdateDeployRoot
	Rm("$dir/*")
	impersonate = Configuration.Maybe.impersonate != null
	if impersonate:
		ImpersonateUser("deployer", '$sdfsd887!'):
			Cp("output/Updater/*", dir, true)
	else:
		Cp("output/Updater/*", dir, true)

task "build:client", ["Production", "build:client:bin", "build:setup", "build:update"]

task "build:client:bin":
	print Globals.Environment
	proj = "src/client/app/app.csproj"
	output, _ = GetBuildConfig(Globals, proj)
	Clean(Globals, proj)
	Build(Globals, proj)
	Cp(FileSet("**", BaseDirectory: "lib/libmysqld"), output)
	Rm(FileSet("$output/*.xml"))
	if Globals.Environment == @Production:
		Rm(FileSet("$output/*.pdb"))

task "build:setup":
	arg = ""
	if Globals.Environment != @Production:
		arg = "--quiet"
	Bash("./scripts/wix.sh $arg")

task "setup:preprocess":
	proj = "src/client/app/app.csproj"
	output, _ = GetBuildConfig(Globals, proj)
	bin = FileSet("*.exe", BaseDirectory: output).First()

	assembly = AssemblyDefinition.ReadAssembly(bin)
	File.WriteAllText("output/setup/version.txt", assembly.Name.Version.ToString())
	name = "output/setup/files.wxs"
	document = XDocument.Load(name)
	manager = XmlNamespaceManager(NameTable())
	manager.AddNamespace("prefix", "http://schemas.microsoft.com/wix/2006/wi")

	AddDirectory("INSTALLFOLDER", output, document, manager)
	document.Save(name)
	Cp("assets/Демонстрационная дефектура.csv", "output/setup/")

task "build:update":
	Clean(Globals, "Updater")
	Build(Globals, "Updater")
	Cp("output/setup/version.txt", "output/Updater/", true)
	Cp("output/client/*", "output/Updater/", true)
	Rm(FileSet("output/Updater/*.xml"))
	if Globals.Environment == @Production:
		Rm(FileSet("output/Updater/*.pdb"))

task "git:push:tags":
	return unless Globals.Environment == @Production
	Bash("git push --tags")

task "git:tag":
	return unless Globals.Environment == @Production
	kind = Configuration.Maybe.kind
	raise "Нужно указать тип релиза patch - исправление ошибок, minor - новый функционал, major - координальные изменения в существующем функционале" unless kind
	Bash("./scripts/tag-release.sh $kind")
